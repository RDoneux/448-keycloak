pipeline {
    agent any

    parameters {
        choice(name: 'Environment', choices: ['Development', 'Staging', 'Production'], description: 'Environment to deploy to')
    }

    environment {
        RAILWAY_API_TOKEN = credentials('RAILWAY_API_TOKEN')
        RAILWAY_TOKEN = credentials("RAILWAY_STAGING_TOKEN")
        RAILWAY_PROJECT_ID = "0a6675b6-4945-4272-87f5-2d1fd3de3ce1"
        RAILWAY_SERVICE_ID = "f054bd82-825b-4ab3-b2d8-ec7eac99dfdc"
    }
    stages {

        stage("Initalise") {
            steps {
                script{
                    def environmentMap = [
                        'Development': '9e3e62af-71b9-4da9-ae87-a0942c0b1150',
                        'Staging': '63782922-eeb7-41ca-87ba-a3c7bbd08f16',
                        'Production': '1e28a9fd-5d6e-4848-9934-2c71a04b9866'
                    ]
                }
            }
        }

        stage('Deploy to Railway') {
            steps {
                script {
                    sh 'npm i @railway/cli'
                    env.PATH = "${env.WORKSPACE}/node_modules/.bin:${env.PATH}"
                    sh "railway up --detach --service keycloak --environment ${environnmentMap[params.Environment]}"
                }
            }
        }

        stage('Set Railway Environment Variables') {
            steps {
                script {

                    def envVariables = [
                        [key: "KC_DB", value: "postgres"],
                        [key: "KC_DB_POOL_MIN_SIZE", value: "0"],
                        [key: "KC_DB_URL", value: 'jdbc:postgresql://${{Postgres.POSTGRES_PRIVATE_HOST}}:${{Postgres.POSTGRES_PRIVATE_PORT}}/${{Postgres.POSTGRES_DATABASE}}'],
                        [key: "KC_FEATURES", value: "token-exchange"],
                        [key: "KC_HEALTH_ENABLED", value: "true"],
                        [key: "KC_HOSTNAME", value: '${{RAILWAY_PUBLIC_DOMAIN}}'],
                        [key: "KC_HOSTNAME_STRICT", value: "true"],
                        [key: "KC_HOSTNAME_STRICT_BACKCHANNEL", value: "true"],
                        [key: "KC_HTTP_ENABLED", value: "true"],
                        [key: "KC_HTTP_PORT", value: "8080"],
                        [key: "KC_METRICS_ENABLED", value: "true"],
                        [key: "KC_PROXY", value: "edge"],
                        [key: "KEYCLOAK_ADMIN", value: "admin"],
                        [key: "KEYCLOAK_ADMIN_PASSWORD", value: '${{shared.KEYCLOAK_ADMIN_PASSWORD}}'],
                        [key: "PORT", value: "8080"],
                        [key: "PROXY_ADDRESS_FORWARDING", value: "true"],
                        [key: "QUARKUS_TRANSACTION_MANAGER_ENABLE_RECOVERY", value: "true"],
                    ]

                    envVariables.each { envVar ->
                        sh """
                            curl --request POST \
                              --url https://backboard.railway.app/graphql/v2 \
                              --header 'Authorization: Bearer ${RAILWAY_API_TOKEN}' \
                              --header 'Content-Type: application/json' \
                              --data '{
                                "query": "mutation variableUpsert { variableUpsert(input: { projectId: \\"${RAILWAY_PROJECT_ID}\\", environmentId: \\"${environmentMap[params.Environment]}\\", serviceId: \\"${RAILWAY_SERVICE_ID}\\", name: \\"${envVar.key}\\", value: \\"${envVar.value}\\" }) }"}'
                        """
                    }
                }
            }
        }
    }
}
